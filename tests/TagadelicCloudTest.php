<?php

require_once 'TagadelicCloud.php';
require_once 'TagadelicTag.php';

/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-05-16 at 15:23:33.
 */
class TagadelicCloudTest extends PHPUnit_Framework_TestCase {
  /**
   * @var TagadelicCloud
   */
  protected $object;

  /**
   * Sets up the fixture, for example, opens a network connection.
   * This method is called before a test is executed.
   */
  protected function setUp() {
    $this->object = new TagadelicCloud(1337);

    $this->blackbeard = $this->getMock("TagadelicTag", array("get_name", "count", "set_weight"), array(14, "blackbeard", 100));

    $this->blackbeard->expects($this->any())
      ->method("get_name")
      ->will($this->returnValue("blackbeard"));
    $this->blackbeard->expects($this->any())
      ->method("count")
      ->will($this->returnValue(100));

    $this->jane = $this->getMock("TagadelicTag", array("get_name", "count", "set_weight"), array(14, "jane", 200));
    $this->jane->expects($this->any())
      ->method("get_name")
      ->will($this->returnValue("jane"));
    $this->jane->expects($this->any())
      ->method("count")
      ->will($this->returnValue(200));

    $this->mock_tags = array($this->blackbeard, $this->jane);
  }

  /**
   * Tears down the fixture, for example, closes a network connection.
   * This method is called after a test is executed.
   */
  protected function tearDown() {
  }

  /**
   * constructor should set the ID to the variable passed.
   */
  public function test__construct() {
    // First param should be assigned to the id.
    $this->assertAttributeSame(1337, "id", $this->object);

    // Optional second argument pre-sets the tags.
    $this->object = new TagadelicCloud(1337, $this->mock_tags);
    $this->assertAttributeSame($this->mock_tags, "tags", $this->object);
  }

  /**
   * @covers TagadelicCloud::get_id
   */
  public function testGet_id() {
    $this->assertEquals(1337, $this->object->get_id());
  }

  /**
   * @covers TagadelicCloud::get_tags
   * Tests if get_Tags returns an array only.
   */
  public function testGet_tags() {
    $this->object = new TagadelicCloud(1337, $this->mock_tags);
    $this->assertSame($this->mock_tags, $this->object->get_tags());
  }

  /**
   * @covers TagadelicCloud::add_tag
   */
  public function testAdd_tag() {
    $this->object->add_tag($this->blackbeard);
    $this->assertAttributeContains($this->blackbeard, "tags", $this->object);
  }

  /**
   * @covers TagadelicCloud::add_tag()
   */
  public function testAdd_tagIsChainable() {
    $this->assertEquals($this->object->add_tag($this->blackbeard), $this->object);
  }

  /**
   * @covers TagadelicCloud::set_drupal()
   */
  public function testSet_drupal() {
    $drupal = new StdClass();
    $this->object->set_drupal($drupal);
    $this->assertAttributeSame($drupal, "drupal", $this->object);
  }

  /**
   * @covers TagadelicCloud::drupal()
   */
  public function testDrupalReturnsSetValue() {
    $drupal = "ThisIsDrupal";
    $this->object->set_drupal($drupal);
    $this->assertSame($this->object->drupal(), $drupal);
  }

  /**
   * @covers TagadelicCloud::drupal()
   */
  public function testDrupalInstantiatesNewWrapper() {
    $this->object->set_drupal(NULL);
    $drupal = $this->getMock("TagadelicDrupalWrapper");
    $this->assertInstanceOf("TagadelicDrupalWrapper", $this->object->drupal());
  }

  /**
   * @covers tagadeliccloud::from_cache
   */
  public function testfrom_cache() {
    $drupal = $this->getMock("TagadelicDrupalWrapper", array("cache_get"));
    $drupal->expects($this->once())
      ->method("cache_get")
      ->with("tagadelic_cloud_1337")
      ->will($this->returnvalue($this->object));
    $cloud = TagadelicCloud::from_cache(1337, $drupal);
    $this->assertinstanceof("TagadelicCloud", $cloud);
  }

  /**
   * @covers tagadeliccloud::to_cache
   */
  public function testTo_cache() {
    $drupal = $this->getMock("TagadelicDrupalWrapper", array("cache_set"));
    $drupal->expects($this->once())
      ->method("cache_set")
      ->with("tagadelic_cloud_1337", $this->object);
    $this->object->set_drupal($drupal);

    $this->object->to_cache();
  }

  /**
   * Get Tags should calculate the weights
   */
  public function testGetCalculatedTags() {
    foreach ($this->mock_tags as $mock_tag) {
      $mock_tag->expects($this->once())
        ->method('set_weight')
        ->with($this->greaterThan(0))
        ->will($this->returnSelf());
      $mocks[] = $mock_tag;
    }
    $this->object = new TagadelicCloud(1337, $mocks);
    $this->object->get_tags();
  }

  /**
   * Get Tags should calculate the weights
   */
  public function testGetCalculatedWeights() {
    $mocks = array();
    $assert_table = array(
      //       name              , count , weight
      array("Mary Read"          , 1     , 1),
      array("Jean Fleury"        , 1     , 1),
      array("FranÃ§ois Le Clerc"  , 1     , 1),
      array("Blackbeard"         , 2     , 1),
      array("Henry Morgan"       , 3     , 2),
      array("Bartolomew Roberts" , 10    , 3),
      array("Stede Bonnet"       , 20    , 4),
      array("Edward Low"         , 40    , 5),
      array("Anne Bonny"         , 100   , 6),
    );
    $i = 1;

    foreach($assert_table as $assertion) {
       $mock = $this->getMock("TagadelicTag", array("name", "count", "set_weight"), array($i++, $assertion[0], $assertion[1]));
       $mock->expects($this->once())
        ->method("set_weight")
        ->with($assertion[2])
        ->will($this->returnSelf());

       $mocks[] = $mock;
    }
    $this->object = new TagadelicCloud(1337, $mocks);
    $this->object->get_tags();
  }

  /**
   * Default is not sorted
   **/
  public function testNotSorted() {
    $this->object->add_tag($this->jane);
    $this->object->add_tag($this->blackbeard);

    $expected_order = array("jane", "blackbeard");
    $given_order = array();

    foreach($this->object->get_tags() as $tag) {
      $tag->force_clean();
      $given_order[] = $tag->get_name();
    }

    $this->assertSame($given_order, $expected_order);
  }

  /**
   * Sort By name
   **/
  public function testSortByName() {
    $drupal = $this->getMock("TagadelicDrupalWrapper", array("check_plain"));
    $drupal->expects($this->any())->method("check_plain")->will($this->returnArgument(0));
    $this->object->set_drupal($drupal);

    $this->object->add_tag($this->jane);
    $this->object->add_tag($this->blackbeard);

    $expected_order = array("blackbeard", "jane");
    $given_order = array();

    $this->object->sort("name");

    foreach($this->object->get_tags() as $tag) {
      $given_order[] = $tag->get_name();
    }

    $this->assertSame($given_order, $expected_order);
  }

  /**
   * Sort by count. Highest count first.
   */
  public function testSortByCount() {
    $drupal = $this->getMock("TagadelicDrupalWrapper", array("check_plain"));
    $drupal->expects($this->any())->method("check_plain")->will($this->returnArgument(0));
    $this->object->set_drupal($drupal);

    $this->object->add_tag($this->jane);       //count 200
    $this->object->add_tag($this->blackbeard); //count 100

    $expected_order = array("jane", "blackbeard");
    $given_order = array();

    $this->object->sort("count");

    foreach($this->object->get_tags() as $tag) {
      $given_order[] = $tag->get_name();
    }

    $this->assertSame($given_order, $expected_order);
  }

  /**
   * Sort random.
   */
  public function testSortRandom() {
    $drupal = $this->getMock("TagadelicDrupalWrapper", array("shuffle"));
    $drupal->expects($this->once())
      ->method("shuffle");
    $this->object->set_drupal($drupal);

    $this->object->sort("random");
  }
}
