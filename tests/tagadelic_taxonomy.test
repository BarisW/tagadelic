<?php
class TagadelicTaxonomyTestCase extends DrupalWebTestCase {
  protected $vocabulary;
  protected $tags  = array();
  protected $nodes = array();

  /**
   * getInfo sets information about this test
   *
   * @scope public static
   * @returns Array  Descriptive array for this test
   */
  public static function getInfo() {
    return array(
      "name" => "Tagadelic Taxonomy Test",
      "description" => "Tests tagclouds from Tagadelic Taxonomy",
      "group" => "Tagadelic",
    );
  }

  /**
   * @scope public
   * @returns Type  Description of return value
   */
  public function setUp() {
    parent::setUp(array('tagadelic_taxonomy'));
  }

  public function testHasTagcloudPage() {
    $this->drupalGet("tagadelic_taxonomy");
    $this->assertResponse(200, "Can Access Page");
    $this->assertText(t("Tag Cloud"), "Title of page is Tag Cloud");
  }

  public function testTagsWithoutNodesNotOnPage() {
    $this->createVocAndTags(3, FALSE);
    $this->drupalGet("tagadelic_taxonomy");
    foreach($this->tags as $tag) {
      $this->assertNoText($tag->name);
    }
  }

  public function testHasTagsOnPage() {
    $this->createVocAndTags(1);
    $this->drupalGet("tagadelic_taxonomy");
    $tag = $this->tags[0];
    $this->assertText($tag->name);
  }

  public function testHasClickableLink() {
    $this->createVocAndTags(1);
    $this->drupalGet("tagadelic_taxonomy");

    $link = "/taxonomy/term/{$this->tags[0]->tid}";
    $this->assertHasXpath("//*/ul[@class='tag-cloud']/li/a[@href='{$link}']");
  }

  public function testHasFiveTags() {
    $this->createVocAndTags(5);
    $this->drupalGet("tagadelic_taxonomy");
    $amount = count($this->xpath("//*/ul[@class='tag-cloud']/li"));
    $this->assertEqual(5, $amount);
  }

  public function testHasMaxsixtyTags() {
    $this->createVocAndTags(100);
    $this->drupalGet("tagadelic_taxonomy");
    $amount = count($this->xpath("//*/ul[@class='tag-cloud']/li"));
    $this->assertEqual(60, $amount);
  }

  public function testHasWeightedTags() {
    $this->createVocAndTags(6);
    $this->createNodesWithTags(10);
    $this->drupalGet("tagadelic_taxonomy");
    $weight = 1;
    foreach($this->tags as $tag) {
      /*$this->assertTagHasWeight($tag->name, $weight++);*/
      $this->assertTagHasWeight($tag->name, 1);
    }
  }

  private function createVocAndTags($amount_of_tags, $create_node = TRUE) {
    $tx_test = new TaxonomyWebTestCase();

    $this->tags       = array();
    $this->vocabulary = $tx_test->createVocabulary();
    for ($i = 0; $i < $amount_of_tags; $i++) {
      $this->tags[] = $tx_test->createTerm($this->vocabulary);
    }

    if ($create_node) $this->createNodesWithTags(1);
    return $this;
  }

  /**
   * Creates $amount nodes with terms attached.
   *
   *
   * Fuck it, I am poking around in the database directly instead of testing
   * and preparing all this field, entity, admin-user and whatnot. I am not 
   * interested in whether or not we can store nodes with tags, only that they
   * are there. By adding them to the database, we achieve that.
   */
  private function createNodesWithTags($amount) {
    $this->nodes = array();
    $attachable = $this->tags;
    for ($i = 0; $i < $amount; $i++) {
      // Post an article.
      $node = new StdClass();
      $node->title = $this->randomName();
      $node->type  = "story";
      node_save($node);
      $this->nodes[] = $node;

      // Attach the terms
      $query = db_insert('taxonomy_index')->fields(array('nid', 'tid', 'sticky', 'created'));
      foreach($attachable as $tag) {
        $query->values(array(
          'nid' => $node->nid,
          'tid' => $tag->tid,
          'sticky' => TRUE,
          'created' => $node->created,
        ));
      }
      $query->execute();

      //remove one tag, so the next node gets one less tag attached.
      array_shift($attachable);
    }
    return $this;
  }

  /**
   * assertHasXpath Asserts the existence of an xpath
   *
   * @scope private
   * @returns Boolean Boolean Assertion-result
   */
  private function assertHasXpath($xpath, $message = '', $group = 'Other') {
    if (empty($message)) {
      $message = "xpath '{$xpath}' not found.";
    }
    $xpath = $this->xpath($xpath);
    $truthiness = count($xpath) > 0;
    return $this->assertTrue($truthiness, $message, $group);
  }

  private function assertHasTag($name, $message = '', $group = 'Other') {
    $xpath = "//ul[@class='tag-cloud']/li/a";
    return $this->assertHasXpath($xpath, $message, $group);
  }

  private function assertTagHasWeight($name, $weight, $message = '', $group = 'Other') {
    if (empty($message)) {
      $message = "Tag with name '{$name}' and class 'weight-{$weight}' found";
    }
    $xpath = "//*/ul[@class='tag-cloud']/li/a[contains(text(),'{$name}')][@class='weight-{$weight}']";
    return $this->assertHasXpath($xpath, $message, $group = 'Other');
  }
}
