<?php
class TagadelicTaxonomyTestCase extends DrupalWebTestCase {
  protected $vocabulary;
  protected $tags  = array();
  protected $nodes = array();

  /**
   * getInfo sets information about this test
   *
   * @scope public static
   * @returns Array  Descriptive array for this test
   */
  public static function getInfo() {
    return array(
      "name" => "Tagadelic Taxonomy Test",
      "description" => "Tests tagclouds from Tagadelic Taxonomy",
      "group" => "Tagadelic",
    );
  }

  /**
   * @scope public
   * @returns Type  Description of return value
   */
  public function setUp() {
    parent::setUp(array('tagadelic_taxonomy'));
  }

  public function testHasTagcloudPage() {
    $this->drupalGet("tagadelic_taxonomy");
    $this->assertResponse(200, "Can Access Page");
    $this->assertText(t("Tag Cloud"), "Title of page is Tag Cloud");
  }

  public function testHasTagsOnPage() {
    $this->createVocAndTags(1);
    $this->drupalGet("tagadelic_taxonomy");
    $tag = $this->tags[0];
    $this->assertText($tag->name);
  }

  public function testHasClickableLink() {
    $this->createVocAndTags(1);
    $this->drupalGet("tagadelic_taxonomy");
    $this->assertHasXpath("//ul[@class='tag-cloud']/li/a", "Link with class tag in UL/LI");

    $link = $this->xpath("//ul[@class='tag-cloud']/li/a[1]");
    $links_to = (string) $link[0]->attributes()["href"];
    $tag = $this->tags[0];
    $this->assertEqual("/taxonomy/term/{$tag->tid}", $links_to);
  }

  private function createVocAndTags($amount_of_tags) {
    $tx_test = new TaxonomyWebTestCase();
    $this->vocabulary = $tx_test->createVocabulary();
    for ($i = 0; $i < $amount_of_tags; $i++) {
      $this->tags[] = $tx_test->createTerm($this->vocabulary);
    }
  }

  private function createNodesWithTags() {
  }

  /**
   * assertHasXpath Asserts the existence of an xpath
   *
   * @scope private
   * @returns Boolean Boolean Assertion-result
   */
  private function assertHasXpath($xpath, $message = '', $group = 'Other') {
    $xpath = $this->xpath($xpath);
    $truthiness = count($xpath) > 0;
    return $this->assertTrue($truthiness, $message, $group);
  }
}
