<?php
class TagadelicTaxonomyAdminWebTestCase extends DrupalWebTestCase {
  private $admin_url = "admin/structure/tagadelic_taxonomy";

  /**
   * getInfo sets information about this test
   *
   * @scope public static
   * @returns Array  Descriptive array for this test
   */
  public static function getInfo() {
    return array(
      "name" => "Tagadelic Taxonomy Admin Test",
      "description" => "Tests admin area in Tagadelic Taxonomy",
      "group" => "Tagadelic",
    );
  }

  /**
   * @scope public
   * @returns Type  Description of return value
   */
  public function setUp() {
    parent::setUp(array('tagadelic_taxonomy'));
    $web_user = $this->drupalCreateUser(array('access administration pages'));
    $this->drupalLogin($web_user);
  }

  public function testHasTagaDelicPage() {
    $this->drupalGet($this->admin_url);
    $this->assertResponse(200, "Can Access Page");
    $this->assertText(t("Tag Cloud"), "Title of page is Tag Cloud");
  }

  public function testHasCheckboxesForAllVocabularies() {
    $this->createVocabularies(5);
    $this->drupalGet($this->admin_url);
    foreach($this->vocabularies as $vocabulary) {
      $id = "edit-tagadelic-taxonomy-vocabularies-{$vocabulary->vid}";
      $this->assertHasCheckbox($id);
    }
  }

  protected function assertHasCheckbox($id, $message = '', $group = 'Other') {
    if (empty($message)) {
      $message = "checkbox '{$id}' not found";
    }

    $this->assertHasXpath(".//input[@id='{$id}'][@type='checkbox']");
  }

  protected function assertHasXpath($xpath, $message = '', $group = 'Other') {
    if (empty($message)) {
      $message = "xpath '{$xpath}' not found.";
    }
    $xpath = $this->xpath($xpath);
    $truthiness = count($xpath) > 0;
    return $this->assertTrue($truthiness, $message, $group);
  }

  /*
   * Builder functions
   */
  private function createVocabularies($amount) {
    $tx_test = new TaxonomyWebTestCase();
    for ($i = 0; $i < $amount; $i++) {
      $tx_test->createVocabulary();
      $this->vocabularies[] = $tx_test->createVocabulary();
    }

    return $this;
  }
}
