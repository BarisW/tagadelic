<?php
class TagadelicCloudTest extends PHPUnit_Framework_TestCase {
  /**
   * contrstructor should set the ID to the variable passed.
   */
  public function test_construct() {
    $cloud = new TagadelicCloud(1337);
    $this->assertAttributeSame(1337, "id", $cloud);
  }
  /**
   * @expectedException InvalidArgumentException
   */
  public function test_construct_false_id() {
    $cloud = new TagadelicCloud("woot");
  }

  /**
   * Find the id with a getter
   */
  public function test_get_id() {
    $cloud = new TagadelicCloud(1337);
    $this->assertEquals(1337, $cloud->get_id());
  }
}

/* class TagadelicTestCase extends DrupalWebTestCase {*/

/*   function testTagadelicCloud() {*/

/*     $message = t('Public properties $name $description $path and $steps should be accessible.');*/
/*     $this->assertTrue(isset($cloud->name), $message);*/
/*     $this->assertTrue(isset($cloud->description), $message);*/
/*     $this->assertTrue(isset($cloud->path), $message);*/
/*     $this->assertTrue(isset($cloud->steps), $message);*/
    
/*     $message = t('Steps should default to 6 (int)');*/
/*     $this->assertIdentical($cloud->steps, 6, $message);*/
    
/*     $message = t('add_tag should add a new tag');*/
/*     $cloud = $this->cloud();*/
/*     foreach(array('aap', 'noot', 'mies') as $name) {*/
/*       $tag = new tagadelicTag($name, "/path/to/$name");*/
/*       $cloud->add_tag($tag);*/
/*     }*/
/*     $this->assertEqual(count($cloud->get_tags()), 3, $message);*/
    
/*     $message = t('add_tag_by_name should add a new tag with new name.');*/
/*     $cloud = $this->cloud_with_tags();*/
/*     $this->assertEqual(count($cloud->get_tags()), 3, $message);*/

/*     $message = t('Adding tags without recalculation should leave all weights at 0.');*/
/*     $cloud = $this->cloud_with_tags(FALSE);*/
/*     foreach($cloud->get_tags() as $key => $tag) {*/
/*       $weights[$key] = $tag->get_weight();*/
/*       $test_weights[$key] = 0.0;*/
/*     }*/
/*     $this->assertEqual($weights, $test_weights, $message);*/

/*     $message = t('Adding a tag with recalculation should recalculate weight.');*/
/*     # Re-set cloud to avoid contamination.*/
/*     $cloud = $this->cloud();*/
/*     $tag = new tagadelicTag('aap', "/path/to/aap");*/
/*     $tag->count = 1;*/
/*     $cloud->add_tag($tag);*/
/*     $tag = new tagadelicTag('noot', "/path/to/noot");*/
/*     $tag->count = 2;*/
/*     $cloud->add_tag($tag, TRUE);*/
/*     $last = end($cloud->get_tags());*/
/*     $this->assertNotEqual($last->get_weight(), 0, $message);*/
    
/*     $message = t('get_tags with recalculation should return weighted tags.');*/
/*     $cloud = $this->cloud_with_tags();*/
/*     foreach($cloud->get_tags(TRUE) as $key => $tag) {*/
/*       $weights[$key] = $tag->get_weight();*/
/*       $test_weights[$key] = 0.0;*/
/*     }*/
/*     $this->assertNotEqual($weights, $test_weights, $message);*/
    
/*     $message = t('get_tags without recalculation should return unweighted tags.');*/
/*     $cloud = $this->cloud_with_tags(FALSE);*/
/*     foreach($cloud->get_tags(FALSE) as $key => $tag) {*/
/*       $weights[$key] = $tag->get_weight();*/
/*       $test_weights[$key] = 0.0;*/
/*     }*/
/*     $this->assertEqual($weights, $test_weights, $message);*/
/*   }*/
  
  /**
   * Helper function to create a cloud with three tags in it.
   * 
   * @param $recalculate = TRUE
   *   Flag passed to recalculation methods
   *
   * @return
   *   A Cloud with three Tags.
   */
/*   private function cloud_with_tags($recalculate = TRUE) {*/
/*     $cloud = new TagadelicCloud('test');*/
/*     foreach(array('aap', 'noot', 'mies') as $name) {*/
/*       $cloud->add_tag_by_name($name, "/path/to/$name", $recalculate);*/
/*     }*/
/*     return $cloud;*/
/*   }*/
  
  /**
   * Helper function to create an empty cloud.
   * 
   * @return
   *   A Cloud
   */
/*   private function cloud() {*/
/*     $cloud = new TagadelicCloud('test');*/
/*     return $cloud;*/
/*   }*/
/* }*/

?>
